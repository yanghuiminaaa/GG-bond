//顺序表的排序与合并算法实现
#include<stdio.h>
#include<stdlib.h>

#define OK 1
#define ERROR 0
#define OVERFLOW -2

#define LIST_INIT_SIZE 100//线性表存储空间初始分配量
#define LISTINCREMENT 10//线性表存储空间分配增量

typedef int elemtype;
typedef int Status;//数据类型说明

typedef struct {
	elemtype* elem;//存储空间基址
	int length;//当前长度
	int listsize;//当前分配的存储容量//以sizeof（elemtype）为单位
}Sqlist;

//初始化线性表
Status initlist(Sqlist& L)
{//构造一个空线性表L
	L.elem = (elemtype*)malloc(LIST_INIT_SIZE * sizeof(elemtype));
	if (!L.elem)exit(OVERFLOW);
	L.length = 0;
	L.listsize = LIST_INIT_SIZE;
	return OK;
}

//在一个空的线性表中输入n个数据
Status sqlistinput(Sqlist& L, int n)
{
	int i = 0;
	if (n > L.listsize)return ERROR;
	for (i = 0; i < n; i++)
		scanf_s("%d", &L.elem[i]);
	L.length = n;
	return OK;
}

//判断线性表是否为空
Status Listempty(Sqlist L)
{
	if (L.length = 0)return ERROR;
	else return OK;
}

//求线性表的长度
Status ListLength(Sqlist L)
{
	return L.length;
}

//将线性表L的数据输出
Status sqlistoutput(Sqlist L)
{
	int i;
	for (i = 0; i < ListLength(L); i++)
		printf("%4d", L.elem[i]);
	printf("\n");
	return OK;
}

//将la和lb线性表归并到lc
void mergelist_sq(Sqlist la, Sqlist lb, Sqlist& lc)
{
	elemtype* pa, * pb, * pc, * pa_last, * pb_last;
	pa = la.elem;
	pb = lb.elem;
	lc.listsize = lc.length = la.length + lb.length;
	pc = lc.elem = (elemtype*)malloc(lc.listsize * sizeof(elemtype));
	if (!lc.elem)exit(OVERFLOW);
	pa_last = la.elem + la.length - 1;
	pb_last = lb.elem + lb.length - 1;
	while (pa <= pa_last && pb <= pb_last) {
		if (*pa <= *pb)
			*pc++ = *pa++;
		else
			*pc++ = *pb++;
	}
	while (pa <= pa_last)
		*pc++ = *pa++;
	while (pb <= pb_last)
		*pc++ = *pb++;
}


//对线性表的元素进行排序
Status sortsqlist(Sqlist& L)
{//冒泡排序
	int i, j, len;
	elemtype t;
	len = L.length;
	for(i=len-1;i>=1;i--)
		for (j = 0; j < i; j++)
		{
			if (L.elem[j] > L.elem[j + 1])
			{
				t = L.elem[j];
				L.elem[j] = L.elem[j + 1];
				L.elem[j + 1] = t;
			}
		}
	return OK;
}

//主函数
void main()
{
	Sqlist la,lb,lc;
	int n, m;
	//建立线性表，并输入输出线性表的数据
	initlist(la);
	initlist(lb);
	printf("请输入线性表la的元素个数n\n");
	scanf_s("%d", &n);
	printf("请输入线性表la的n个元素\n");
	sqlistinput(la, n);
	sqlistoutput(la);
	printf("\n");

	//建立两个线性表并排序然后归并
	printf("请输入线性表lb的元素个数m\n");
	scanf_s("%d", &m);
	printf("请输入线性表lb的m个元素\n");
	sqlistinput(lb, m);
	printf("\n");
	sqlistoutput(lb);
	
	sortsqlist(la);
	printf("排序后的la为：\n");
	sqlistoutput(la);
	sortsqlist(lb);
	printf("排序后的lb为：\n");
	sqlistoutput(lb);

	mergelist_sq(la, lb, lc);
	printf("线性表la与线性表lb合并后为：\n");
	sqlistoutput(lc);
}
