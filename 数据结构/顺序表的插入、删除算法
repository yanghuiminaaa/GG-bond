//顺序表的插入、删除算法实现
#include<stdio.h>
#include<stdlib.h>

#define OK 1
#define ERROR 0
#define OVERFLOW -2

#define LIST_INIT_SIZE 100//线性表存储空间初始分配量
#define LISTINCREMENT 10//线性表存储空间分配增量

typedef int elemtype;
typedef int Status;//数据类型说明

typedef struct {
	elemtype* elem;//存储空间基址
	int length;//当前长度
	int listsize;//当前分配的存储容量//以sizeof（elemtype）为单位
}Sqlist;

//初始化线性表
Status initlist(Sqlist& L)
{//构造一个空线性表L
	L.elem = (elemtype*)malloc(LIST_INIT_SIZE * sizeof(elemtype));
	if (!L.elem)exit(OVERFLOW);
	L.length = 0;
	L.listsize = LIST_INIT_SIZE;
	return OK;
}

//在一个空的线性表中输入n个数据
Status sqlistinput(Sqlist& L, int n)
{
	int i = 0;
	if (n > L.listsize)return ERROR;
	for (i = 0; i < n; i++)
		scanf_s("%d", &L.elem[i]);
	L.length = n;
	return OK;
}

//判断线性表是否为空
Status Listempty(Sqlist L)
{
	if (L.length = 0)return ERROR;
	else return OK;
}

//求线性表的长度
Status ListLength(Sqlist L)
{
	return L.length;
}

//将线性表L的数据输出
Status sqlistoutput(Sqlist L)
{
	int i;
	for (i = 0; i < ListLength(L); i++)
		printf("%4d", L.elem[i]);
	printf("\n");
	return OK;
}

//在线性表中插入一个元素
Status listinsert_sq(Sqlist& L, int i, elemtype e)
{
	//在顺序线性表L中第i个位置之前插入新的元素e
	//i的合法值为1<=i<=listlength_sq(L)+1
	elemtype* p, * q, * newbase;
	if (i<1 || i>L.length + 1)return ERROR;//i值不合法
	if (L.length >= L.listsize)
	{//当前存储空间已满，增加分配
		newbase = (elemtype*)realloc(L.elem, (L.listsize + LISTINCREMENT) * sizeof(elemtype));
		if (!newbase)exit(OVERFLOW);//存储分配失败
		L.elem = newbase;//新基址
		L.listsize += LISTINCREMENT;//增加存储容量
	}
	q = &(L.elem[i - 1]);
	for (p = &(L.elem[L.length - 1]); p >= q; --p)
		*(p + 1) = *p;//插入位置及之后的元素右移
	*q = e;//插入e
	++L.length;//表长增1
	return OK;
}

//在线性表中删除第i个元素，其结果保留在e中
Status listdelete_sq(Sqlist& L, int i, elemtype& e)
{//在顺序线性表L中删除第i个元素，并用e返回其值
 //i的合法值为1<=i<=listlength_sq(L)
	elemtype* p, * q;
	if ((i < 1) || (i > L.length))
		return ERROR;//i值不合法
	p = &(L.elem[i - 1]);//p为被删除元素的位置
	e = *p;//被删除元素的值赋给e
	q = L.elem + L.length - 1;//表尾元素的位置
	for (++p; p <= q; ++p)//被删除元素之后的元素左移
		*(p - 1) = *p;
	--L.length;//表长减1
	return OK;
}

void main()
{
	Sqlist la;
	int n, i, e;
	//建立线性表，并输入输出线性表的数据
	initlist(la);
	printf("请输入线性表la的元素个数n\n");
	scanf_s("%d", &n);
	printf("请输入线性表la的n个元素\n");
	sqlistinput(la,n);
	sqlistoutput(la);
	printf("\n");
	//调用插入函数，对线性表进行插入操作
	printf("请输入要插入的元素的位置和插入的值\n");
	scanf_s("%d%d", &i, &e);
	listinsert_sq(la, i, e);
	sqlistoutput(la);
	printf("请输入要删除的元素的位置\n");
	//调用删除函数，对线性表进行删除操作
	scanf_s("%d", &i);
	listdelete_sq(la, i, e);
	printf("删掉的数为%d\n", e);
	sqlistoutput(la);
}
